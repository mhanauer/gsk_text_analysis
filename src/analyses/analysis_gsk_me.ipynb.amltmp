{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "%load_ext lab_black"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "The lab_black extension is already loaded. To reload it, use:\n  %reload_ext lab_black\n"
        }
      ],
      "execution_count": 20,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step: Load data"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "import numpy as np\n",
        "import nltk\n",
        "from pyprojroot import here\n",
        "\n",
        "from skimpy import clean_columns\n",
        "from data_cleaning.fun_hot_encode_limit import fun_hot_encode_limit\n",
        "\n",
        "path_data = here(\"./data\")\n",
        "os.chdir(path_data)\n",
        "data_ra = pd.read_csv(\"data_ra_sentiment.csv\")"
      ],
      "outputs": [],
      "execution_count": 21,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1691080040448
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import pipeline\n",
        "\n",
        "\n",
        "def classify_and_analyze(data, candidate_label, topic):\n",
        "    # Initialize the zero-shot classification pipeline\n",
        "    classifier = pipeline(\"zero-shot-classification\")\n",
        "\n",
        "    # Function to apply the classifier to a review\n",
        "    def classify_review(review):\n",
        "        result = classifier(review, [candidate_label])\n",
        "        return dict(zip(result[\"labels\"], result[\"scores\"]))\n",
        "\n",
        "    # Apply the classifier to each review\n",
        "    data[\"emotion_scores\"] = data[\"reviews\"].apply(classify_review)\n",
        "\n",
        "    # Create a new column for the candidate label\n",
        "    data[candidate_label] = data[\"emotion_scores\"].apply(\n",
        "        lambda scores: scores.get(candidate_label)\n",
        "    )\n",
        "\n",
        "    data_sentiment = clean_columns(data)\n",
        "\n",
        "    # Calculate the proportion of entries where the given topic has a score greater than 0.75\n",
        "    len_topic = (\n",
        "        data_sentiment.query(f\"`{topic}` >= .75\").reset_index(drop=True).shape[0]\n",
        "    )\n",
        "    len_all = data_sentiment.shape[0]\n",
        "    percent_topic = round(len_topic / len_all, 2)\n",
        "\n",
        "    data_topic = pd.DataFrame(\n",
        "        {\"len_topic\": len_topic, \"len_all\": len_all, \"percent_topic\": percent_topic},\n",
        "        index=[0],\n",
        "    )\n",
        "\n",
        "    return data_topic, data_sentiment"
      ],
      "outputs": [],
      "execution_count": 24,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1691080726107
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import BartTokenizer, BartForConditionalGeneration\n",
        "\n",
        "\n",
        "def summarize_reviews(reviews, max_length=150):\n",
        "    # Load model and tokenizer\n",
        "    model = BartForConditionalGeneration.from_pretrained(\"facebook/bart-large-cnn\")\n",
        "    tokenizer = BartTokenizer.from_pretrained(\"facebook/bart-large-cnn\")\n",
        "\n",
        "    # Join all reviews into a single string\n",
        "    combined_reviews = \" \".join(reviews)\n",
        "\n",
        "    # Truncate and tokenize combined reviews\n",
        "    inputs = tokenizer(\n",
        "        combined_reviews, truncation=True, max_length=1024, return_tensors=\"pt\"\n",
        "    )\n",
        "\n",
        "    # Generate a summary\n",
        "    summary_ids = model.generate(\n",
        "        inputs[\"input_ids\"], num_beams=4, max_length=max_length, early_stopping=True\n",
        "    )\n",
        "    summary = [\n",
        "        tokenizer.decode(\n",
        "            g, skip_special_tokens=True, clean_up_tokenization_spaces=False\n",
        "        )\n",
        "        for g in summary_ids\n",
        "    ]\n",
        "\n",
        "    return summary"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step: Medical education"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_topic = classify_and_analyze(\n",
        "    data=data_ra, candidate_label=\"pain management\", topic=\"pain_management\"\n",
        ")\n",
        "data_ra_topic = data_topic[1]\n",
        "data_topic[0]"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "No model was supplied, defaulted to facebook/bart-large-mnli (https://huggingface.co/facebook/bart-large-mnli)\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "\u001b[1;36m2\u001b[0m column names have been cleaned\n",
            "text/html": "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> column names have been cleaned\n</pre>\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": 26,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1691080940661
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "from bertopic import BERTopic\n",
        "\n",
        "\n",
        "def extract_topics(data, topic):\n",
        "    # Filter the data by the given topic\n",
        "    data_topic = data.query(f\"`{topic}` >= .75\").reset_index(drop=True)\n",
        "\n",
        "    # Preprocess the reviews\n",
        "    reviews = data_topic[\"reviews_clean\"].values\n",
        "\n",
        "    # Create BERTopic model\n",
        "    topic_model = BERTopic(language=\"english\")\n",
        "\n",
        "    # Fit the model to the reviews\n",
        "    topics, _ = topic_model.fit_transform(reviews)\n",
        "\n",
        "    # Get the topic frequencies\n",
        "    topic_info = topic_model.get_topic_info()\n",
        "\n",
        "    return topic_info"
      ],
      "outputs": [],
      "execution_count": 32,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1691081754164
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "extract_topics(data=data_ra_topic, topic=\"pain_management\")"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 33,
          "data": {
            "text/plain": "   Topic  Count                                Name  \\\n0     -1     56           -1_injection_pain_nt_year   \n1      0     15         0_methotrexate_pain_ra_year   \n2      1     11           1_pain_great_flare_second   \n3      2     10  2_swelling_prednisone_started_pain   \n\n                                      Representation  \\\n0  [injection, pain, nt, year, month, side, ve, d...   \n1  [methotrexate, pain, ra, year, drug, joint, st...   \n2  [pain, great, flare, second, feel, month, usin...   \n3  [swelling, prednisone, started, pain, week, ye...   \n\n                                 Representative_Docs  \n0  [result 2 week starting biweekly . right knee ...  \n1  [diagnosed ra 2011. began taking methotrexate ...  \n2  [one year , n't flare feel like old self . fin...  \n3  [25 year old & diagnosed 3 1/2 yr ago . 3-4 dr...  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Topic</th>\n      <th>Count</th>\n      <th>Name</th>\n      <th>Representation</th>\n      <th>Representative_Docs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-1</td>\n      <td>56</td>\n      <td>-1_injection_pain_nt_year</td>\n      <td>[injection, pain, nt, year, month, side, ve, d...</td>\n      <td>[result 2 week starting biweekly . right knee ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>15</td>\n      <td>0_methotrexate_pain_ra_year</td>\n      <td>[methotrexate, pain, ra, year, drug, joint, st...</td>\n      <td>[diagnosed ra 2011. began taking methotrexate ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>11</td>\n      <td>1_pain_great_flare_second</td>\n      <td>[pain, great, flare, second, feel, month, usin...</td>\n      <td>[one year , n't flare feel like old self . fin...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>10</td>\n      <td>2_swelling_prednisone_started_pain</td>\n      <td>[swelling, prednisone, started, pain, week, ye...</td>\n      <td>[25 year old &amp; diagnosed 3 1/2 yr ago . 3-4 dr...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 33,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1691081760854
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step: Evidence Generation"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_topic = classify_and_analyze(\n",
        "    data=data_ra, candidate_label=\"saftey concerns\", topic=\"saftey_concerns\"\n",
        ")\n",
        "data_ra_topic = data_topic[1]\n",
        "data_topic[0]"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "No model was supplied, defaulted to facebook/bart-large-mnli (https://huggingface.co/facebook/bart-large-mnli)\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "\u001b[1;36m5\u001b[0m column names have been cleaned\n",
            "text/html": "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span> column names have been cleaned\n</pre>\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 55,
          "data": {
            "text/plain": "   len_topic  len_all  percent_topic\n0         39      185           0.21",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>len_topic</th>\n      <th>len_all</th>\n      <th>percent_topic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>39</td>\n      <td>185</td>\n      <td>0.21</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 55,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1691083307528
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "extract_topics(data=data_ra_topic, topic=\"saftey_concerns\")"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 56,
          "data": {
            "text/plain": "   Topic  Count                          Name  \\\n0     -1     39  -1_month_year_pain_injection   \n\n                                      Representation  \\\n0  [month, year, pain, injection, nt, ra, side, w...   \n\n                                 Representative_Docs  \n0  [ra last 10 year really done much , smart.bad ...  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Topic</th>\n      <th>Count</th>\n      <th>Name</th>\n      <th>Representation</th>\n      <th>Representative_Docs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-1</td>\n      <td>39</td>\n      <td>-1_month_year_pain_injection</td>\n      <td>[month, year, pain, injection, nt, ra, side, w...</td>\n      <td>[ra last 10 year really done much , smart.bad ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 56,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1691083311010
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "summarize_reviews(reviews=data_ra_topic[\"reviews\"].values)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step: Medical information dosing"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_topic = classify_and_analyze(\n",
        "    data=data_ra, candidate_label=\"dosing issues\", topic=\"dosing_issues\"\n",
        ")\n",
        "\n",
        "data_ra_topic = data_topic[1]\n",
        "data_topic[0]"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "No model was supplied, defaulted to facebook/bart-large-mnli (https://huggingface.co/facebook/bart-large-mnli)\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "\u001b[1;36m4\u001b[0m column names have been cleaned\n",
            "text/html": "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> column names have been cleaned\n</pre>\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 36,
          "data": {
            "text/plain": "   len_topic  len_all  percent_topic\n0         66      185           0.36",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>len_topic</th>\n      <th>len_all</th>\n      <th>percent_topic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>66</td>\n      <td>185</td>\n      <td>0.36</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 36,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1691082155547
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "summarize_reviews(reviews=data_ra_topic[\"reviews\"].values)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 48,
          "data": {
            "text/plain": "['I was on methotrexate and it quit working for me. I tried Embrel which still left me with swollen elbows. My doctor recommended Humira and at first it was like a miracle. I only took a shot every six to eight weeks. For some reason it seems to have lost its effectiveness. Has anyone experienced this?']"
          },
          "metadata": {}
        }
      ],
      "execution_count": 48,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1691082783637
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "extract_topics(data=data_ra_topic, topic=\"dosing_issues\")"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 37,
          "data": {
            "text/plain": "   Topic  Count                          Name  \\\n0     -1     15  -1_injection_rash_every_time   \n1      0     34             0_ra_year_nt_pain   \n2      1     17   1_week_month_injection_dose   \n\n                                      Representation  \\\n0  [injection, rash, every, time, pain, week, wor...   \n1  [ra, year, nt, pain, drug, week, methotrexate,...   \n2  [week, month, injection, dose, using, every, g...   \n\n                                 Representative_Docs  \n0  [diagnosed ra 2 year ago . pain 5 year . also ...  \n1  ['ve rheumatoid 20 year . started shortly came...  \n2  [using year . seen little improvement . doctor...  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Topic</th>\n      <th>Count</th>\n      <th>Name</th>\n      <th>Representation</th>\n      <th>Representative_Docs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-1</td>\n      <td>15</td>\n      <td>-1_injection_rash_every_time</td>\n      <td>[injection, rash, every, time, pain, week, wor...</td>\n      <td>[diagnosed ra 2 year ago . pain 5 year . also ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>34</td>\n      <td>0_ra_year_nt_pain</td>\n      <td>[ra, year, nt, pain, drug, week, methotrexate,...</td>\n      <td>['ve rheumatoid 20 year . started shortly came...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>17</td>\n      <td>1_week_month_injection_dose</td>\n      <td>[week, month, injection, dose, using, every, g...</td>\n      <td>[using year . seen little improvement . doctor...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 37,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1691082183230
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step: Medical information"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_topic = classify_and_analyze(\n",
        "    data=data_ra, candidate_label=\"side effects\", topic=\"side_effects\"\n",
        ")\n",
        "data_ra_topic = data_topic[1]\n",
        "data_topic[0]"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "summarize_reviews(reviews=data_ra_topic[\"reviews\"].values)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "extract_topics(data=data_ra_topic, topic=\"side_effects\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step: Patient outreach management"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_topic = classify_and_analyze(\n",
        "    data=data_ra, candidate_label=\"management\", topic=\"management\"\n",
        ")\n",
        "data_ra_topic = data_topic[1]\n",
        "data_topic[0]"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "summarize_reviews(reviews=data_ra_topic[\"reviews\"].values)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "extract_topics(data=data_ra_topic, topic=\"management\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step: Patient outreach early treatment"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_topic = classify_and_analyze(\n",
        "    data=data_ra, candidate_label=\"early treatment\", topic=\"early_treatment\"\n",
        ")\n",
        "data_ra_topic = data_topic[1]\n",
        "data_topic[0]"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "summarize_reviews(reviews=data_ra_topic[\"reviews\"].values)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "extract_topics(data=data_ra_topic, topic=\"early_treatment\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}